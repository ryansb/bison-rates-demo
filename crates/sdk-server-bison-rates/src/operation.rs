// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct CreateBisonOperationInputWrapper(crate::input::CreateBisonInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for CreateBisonOperationInputWrapper
where
    B: aws_smithy_http_server::body::HttpBody + Send,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::runtime_error::RuntimeError;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        crate::operation_deser::parse_create_bison_request(req)
            .await
            .map(CreateBisonOperationInputWrapper)
            .map_err(|err| aws_smithy_http_server::runtime_error::RuntimeError {
                protocol: aws_smithy_http_server::protocols::Protocol::RestJson1,
                kind: err.into(),
            })
    }
}
pub(crate) enum CreateBisonOperationOutputWrapper {
    Output(crate::output::CreateBisonOutput),
    Error(crate::error::CreateBisonError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for CreateBisonOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match self {
            Self::Output(o) => match crate::operation_ser::serialize_create_bison_response(o) {
                Ok(response) => response,
                Err(e) => aws_smithy_http_server::runtime_error::RuntimeError {
                    protocol: aws_smithy_http_server::protocols::Protocol::RestJson1,
                    kind: e.into(),
                }
                .into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_create_bison_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::extension::ModeledErrorExtension::new(err.name()),
                    );
                    response
                }
                Err(e) => aws_smithy_http_server::runtime_error::RuntimeError {
                    protocol: aws_smithy_http_server::protocols::Protocol::RestJson1,
                    kind: e.into(),
                }
                .into_response(),
            },
        }
    }
}
impl From<Result<crate::output::CreateBisonOutput, crate::error::CreateBisonError>>
    for CreateBisonOperationOutputWrapper
{
    fn from(res: Result<crate::output::CreateBisonOutput, crate::error::CreateBisonError>) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<CreateBisonOperationInputWrapper> for crate::input::CreateBisonInput {
    fn from(i: CreateBisonOperationInputWrapper) -> Self {
        i.0
    }
}

#[derive(Debug)]
pub(crate) struct ListBisonOperationInputWrapper(crate::input::ListBisonInput);
#[async_trait::async_trait]
impl<B> axum_core::extract::FromRequest<B> for ListBisonOperationInputWrapper
where
    B: aws_smithy_http_server::body::HttpBody + Send,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Rejection = aws_smithy_http_server::runtime_error::RuntimeError;
    async fn from_request(
        req: &mut axum_core::extract::RequestParts<B>,
    ) -> Result<Self, Self::Rejection> {
        crate::operation_deser::parse_list_bison_request(req)
            .await
            .map(ListBisonOperationInputWrapper)
            .map_err(|err| aws_smithy_http_server::runtime_error::RuntimeError {
                protocol: aws_smithy_http_server::protocols::Protocol::RestJson1,
                kind: err.into(),
            })
    }
}
pub(crate) enum ListBisonOperationOutputWrapper {
    Output(crate::output::ListBisonOutput),
    Error(crate::error::ListBisonError),
}
#[async_trait::async_trait]
impl axum_core::response::IntoResponse for ListBisonOperationOutputWrapper {
    fn into_response(self) -> axum_core::response::Response {
        match self {
            Self::Output(o) => match crate::operation_ser::serialize_list_bison_response(o) {
                Ok(response) => response,
                Err(e) => aws_smithy_http_server::runtime_error::RuntimeError {
                    protocol: aws_smithy_http_server::protocols::Protocol::RestJson1,
                    kind: e.into(),
                }
                .into_response(),
            },
            Self::Error(err) => match crate::operation_ser::serialize_list_bison_error(&err) {
                Ok(mut response) => {
                    response.extensions_mut().insert(
                        aws_smithy_http_server::extension::ModeledErrorExtension::new(err.name()),
                    );
                    response
                }
                Err(e) => aws_smithy_http_server::runtime_error::RuntimeError {
                    protocol: aws_smithy_http_server::protocols::Protocol::RestJson1,
                    kind: e.into(),
                }
                .into_response(),
            },
        }
    }
}
impl From<Result<crate::output::ListBisonOutput, crate::error::ListBisonError>>
    for ListBisonOperationOutputWrapper
{
    fn from(res: Result<crate::output::ListBisonOutput, crate::error::ListBisonError>) -> Self {
        match res {
            Ok(v) => Self::Output(v),
            Err(e) => Self::Error(e),
        }
    }
}
impl From<ListBisonOperationInputWrapper> for crate::input::ListBisonInput {
    fn from(i: ListBisonOperationInputWrapper) -> Self {
        i.0
    }
}
