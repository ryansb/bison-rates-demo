// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Describes one specific validation failure for an input member.
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidationExceptionField {
    /// A JSONPointer expression to the structure member whose value failed to satisfy the modeled constraints.
    pub path: std::string::String,
    /// A detailed description of the validation failure.
    pub message: std::string::String,
}
impl ValidationExceptionField {
    /// A JSONPointer expression to the structure member whose value failed to satisfy the modeled constraints.
    pub fn path(&self) -> &str {
        use std::ops::Deref;
        self.path.deref()
    }
    /// A detailed description of the validation failure.
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
}
impl std::fmt::Debug for ValidationExceptionField {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ValidationExceptionField");
        formatter.field("path", &self.path);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
/// See [`ValidationExceptionField`](crate::model::ValidationExceptionField)
pub mod validation_exception_field {
    /// A builder for [`ValidationExceptionField`](crate::model::ValidationExceptionField)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) path: std::option::Option<std::string::String>,
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// A JSONPointer expression to the structure member whose value failed to satisfy the modeled constraints.
        pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
            self.path = Some(input.into());
            self
        }
        /// A JSONPointer expression to the structure member whose value failed to satisfy the modeled constraints.
        pub fn set_path(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.path = input;
            self
        }
        /// A detailed description of the validation failure.
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        /// A detailed description of the validation failure.
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ValidationExceptionField`](crate::model::ValidationExceptionField)
        pub fn build(self) -> crate::model::ValidationExceptionField {
            crate::model::ValidationExceptionField {
                path: self.path.unwrap_or_default(),
                message: self.message.unwrap_or_default(),
            }
        }
    }
}
impl ValidationExceptionField {
    /// Creates a new builder-style object to manufacture [`ValidationExceptionField`](crate::model::ValidationExceptionField)
    pub fn builder() -> crate::model::validation_exception_field::Builder {
        crate::model::validation_exception_field::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BisonItem {
    #[allow(missing_docs)] // documentation missing in model
    pub id: std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub name: std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub rank: i32,
    #[allow(missing_docs)] // documentation missing in model
    pub tags: std::option::Option<std::vec::Vec<crate::model::BisonTag>>,
}
impl BisonItem {
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn rank(&self) -> i32 {
        self.rank
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn tags(&self) -> std::option::Option<&[crate::model::BisonTag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for BisonItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BisonItem");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("rank", &self.rank);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`BisonItem`](crate::model::BisonItem)
pub mod bison_item {
    /// A builder for [`BisonItem`](crate::model::BisonItem)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) rank: std::option::Option<i32>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::BisonTag>>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn rank(mut self, input: i32) -> Self {
            self.rank = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_rank(mut self, input: std::option::Option<i32>) -> Self {
            self.rank = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        pub fn tags(mut self, input: crate::model::BisonTag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BisonTag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`BisonItem`](crate::model::BisonItem)
        pub fn build(self) -> crate::model::BisonItem {
            crate::model::BisonItem {
                id: self.id.unwrap_or_default(),
                name: self.name.unwrap_or_default(),
                rank: self.rank.unwrap_or_default(),
                tags: self.tags,
            }
        }
    }
}
impl BisonItem {
    /// Creates a new builder-style object to manufacture [`BisonItem`](crate::model::BisonItem)
    pub fn builder() -> crate::model::bison_item::Builder {
        crate::model::bison_item::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BisonTag {
    #[allow(missing_docs)] // documentation missing in model
    pub key: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub value: std::option::Option<std::string::String>,
}
impl BisonTag {
    #[allow(missing_docs)] // documentation missing in model
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl std::fmt::Debug for BisonTag {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BisonTag");
        formatter.field("key", &self.key);
        formatter.field("value", &self.value);
        formatter.finish()
    }
}
/// See [`BisonTag`](crate::model::BisonTag)
pub mod bison_tag {
    /// A builder for [`BisonTag`](crate::model::BisonTag)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key: std::option::Option<std::string::String>,
        pub(crate) value: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
            self.key = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
            self.value = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.value = input;
            self
        }
        /// Consumes the builder and constructs a [`BisonTag`](crate::model::BisonTag)
        pub fn build(self) -> crate::model::BisonTag {
            crate::model::BisonTag {
                key: self.key,
                value: self.value,
            }
        }
    }
}
impl BisonTag {
    /// Creates a new builder-style object to manufacture [`BisonTag`](crate::model::BisonTag)
    pub fn builder() -> crate::model::bison_tag::Builder {
        crate::model::bison_tag::Builder::default()
    }
}
