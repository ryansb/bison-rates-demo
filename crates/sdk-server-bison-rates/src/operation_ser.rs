// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn serialize_create_bison_response(
    #[allow(unused_variables)] output: crate::output::CreateBisonOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::ResponseRejection,
> {
    Ok({
        #[allow(unused_mut)]
        let mut builder = http::Response::builder();
        builder = crate::http_serde::add_headers_create_bison(&output, builder)?;
        builder = aws_smithy_http::header::set_response_header_if_absent(
            builder,
            http::header::CONTENT_TYPE,
            "application/json",
        );
        let body = aws_smithy_http_server::body::to_boxed(
            crate::operation_ser::serialize_structure_crate_output_create_bison_output(&output)?,
        );
        builder.body(body)?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_create_bison_error(
    error: &crate::error::CreateBisonError,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::ResponseRejection,
> {
    Ok({
        match error {
            crate::error::CreateBisonError::AccessDeniedException(output) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_access_denied_exception(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "AccessDeniedException",
                );
                builder
                    .status(403)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::BadRequestException(output) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_bad_request_exception(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "BadRequestException",
                );
                builder
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::GatewayTimeoutException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_gateway_timeout_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "GatewayTimeoutException",
                );
                builder
                    .status(504)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::InternalFailureException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_internal_failure_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "InternalFailureException",
                );
                builder
                    .status(500)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::NotAcceptableException(output) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_not_acceptable_exception(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "NotAcceptableException",
                );
                builder
                    .status(406)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::NotImplementedException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_not_implemented_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "NotImplementedException",
                );
                builder
                    .status(501)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::RequestTooLargeException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_request_too_large_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "RequestTooLargeException",
                );
                builder
                    .status(413)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::ResourceConflictException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_resource_conflict_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ResourceConflictException",
                );
                builder
                    .status(409)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::ResourceNotFoundException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_resource_not_found_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ResourceNotFoundException",
                );
                builder
                    .status(404)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::SerializationException(output) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_serialization_exception(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "SerializationException",
                );
                builder
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::ServiceUnavailableException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_service_unavailable_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ServiceUnavailableException",
                );
                builder
                    .status(503)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::UnknownOperationException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_unknown_operation_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "UnknownOperationException",
                );
                builder
                    .status(404)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::UnsupportedMediaTypeException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_unsupported_media_type_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "UnsupportedMediaTypeException",
                );
                builder
                    .status(415)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CreateBisonError::ValidationException(output) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_validation_exception(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ValidationException",
                );
                builder
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
        }
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_bison_response(
    #[allow(unused_variables)] output: crate::output::ListBisonOutput,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::ResponseRejection,
> {
    Ok({
        #[allow(unused_mut)]
        let mut builder = http::Response::builder();
        builder = crate::http_serde::add_headers_list_bison(&output, builder)?;
        builder = aws_smithy_http::header::set_response_header_if_absent(
            builder,
            http::header::CONTENT_TYPE,
            "application/json",
        );
        let body = aws_smithy_http_server::body::to_boxed(
            crate::operation_ser::serialize_structure_crate_output_list_bison_output(&output)?,
        );
        builder.body(body)?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_list_bison_error(
    error: &crate::error::ListBisonError,
) -> std::result::Result<
    axum_core::response::Response,
    aws_smithy_http_server::rejection::ResponseRejection,
> {
    Ok({
        match error {
            crate::error::ListBisonError::AccessDeniedException(output) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_access_denied_exception(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "AccessDeniedException",
                );
                builder
                    .status(403)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::BadRequestException(output) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_bad_request_exception(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "BadRequestException",
                );
                builder
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::GatewayTimeoutException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_gateway_timeout_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "GatewayTimeoutException",
                );
                builder
                    .status(504)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::InternalFailureException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_internal_failure_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "InternalFailureException",
                );
                builder
                    .status(500)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::NotAcceptableException(output) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_not_acceptable_exception(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "NotAcceptableException",
                );
                builder
                    .status(406)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::NotImplementedException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_not_implemented_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "NotImplementedException",
                );
                builder
                    .status(501)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::RequestTooLargeException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_request_too_large_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "RequestTooLargeException",
                );
                builder
                    .status(413)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::ResourceConflictException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_resource_conflict_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ResourceConflictException",
                );
                builder
                    .status(409)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::ResourceNotFoundException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_resource_not_found_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ResourceNotFoundException",
                );
                builder
                    .status(404)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::SerializationException(output) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_serialization_exception(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "SerializationException",
                );
                builder
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::ServiceUnavailableException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_service_unavailable_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ServiceUnavailableException",
                );
                builder
                    .status(503)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::UnknownOperationException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_unknown_operation_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "UnknownOperationException",
                );
                builder
                    .status(404)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::UnsupportedMediaTypeException(output) => {
                let payload = crate::operation_ser::serialize_structure_crate_error_unsupported_media_type_exception(output)?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "UnsupportedMediaTypeException",
                );
                builder
                    .status(415)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::ListBisonError::ValidationException(output) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_validation_exception(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = http::Response::builder();
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::CONTENT_TYPE,
                    "application/json",
                );
                builder = aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ValidationException",
                );
                builder
                    .status(400)
                    .body(aws_smithy_http_server::body::to_boxed(payload))?
            }
        }
    })
}

pub fn serialize_structure_crate_output_create_bison_output(
    value: &crate::output::CreateBisonOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_output_create_bison_output(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_access_denied_exception(
    value: &crate::error::AccessDeniedException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_access_denied_exception(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_bad_request_exception(
    value: &crate::error::BadRequestException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_bad_request_exception(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_gateway_timeout_exception(
    value: &crate::error::GatewayTimeoutException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_gateway_timeout_exception(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_internal_failure_exception(
    value: &crate::error::InternalFailureException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_internal_failure_exception(
        &mut object,
        value,
    )?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_not_acceptable_exception(
    value: &crate::error::NotAcceptableException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_not_acceptable_exception(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_not_implemented_exception(
    value: &crate::error::NotImplementedException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_not_implemented_exception(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_request_too_large_exception(
    value: &crate::error::RequestTooLargeException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_request_too_large_exception(
        &mut object,
        value,
    )?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_resource_conflict_exception(
    value: &crate::error::ResourceConflictException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_resource_conflict_exception(
        &mut object,
        value,
    )?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_resource_not_found_exception(
    value: &crate::error::ResourceNotFoundException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_resource_not_found_exception(
        &mut object,
        value,
    )?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_serialization_exception(
    value: &crate::error::SerializationException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_serialization_exception(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_service_unavailable_exception(
    value: &crate::error::ServiceUnavailableException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_service_unavailable_exception(
        &mut object,
        value,
    )?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_unknown_operation_exception(
    value: &crate::error::UnknownOperationException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_unknown_operation_exception(
        &mut object,
        value,
    )?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_unsupported_media_type_exception(
    value: &crate::error::UnsupportedMediaTypeException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_unsupported_media_type_exception(
        &mut object,
        value,
    )?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_validation_exception(
    value: &crate::error::ValidationException,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_validation_exception(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_output_list_bison_output(
    value: &crate::output::ListBisonOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_output_list_bison_output(&mut object, value)?;
    object.finish();
    Ok(out)
}
