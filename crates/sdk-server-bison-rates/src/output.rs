// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListBisonOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub members: std::option::Option<std::vec::Vec<crate::model::BisonItem>>,
    #[allow(missing_docs)] // documentation missing in model
    pub max: i32,
    #[allow(missing_docs)] // documentation missing in model
    pub version: std::option::Option<std::string::String>,
}
impl ListBisonOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn members(&self) -> std::option::Option<&[crate::model::BisonItem]> {
        self.members.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max(&self) -> i32 {
        self.max
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl std::fmt::Debug for ListBisonOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListBisonOutput");
        formatter.field("members", &self.members);
        formatter.field("max", &self.max);
        formatter.field("version", &self.version);
        formatter.finish()
    }
}
/// See [`ListBisonOutput`](crate::output::ListBisonOutput)
pub mod list_bison_output {
    /// A builder for [`ListBisonOutput`](crate::output::ListBisonOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) members: std::option::Option<std::vec::Vec<crate::model::BisonItem>>,
        pub(crate) max: std::option::Option<i32>,
        pub(crate) version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `members`.
        ///
        /// To override the contents of this collection use [`set_members`](Self::set_members).
        ///
        pub fn members(mut self, input: crate::model::BisonItem) -> Self {
            let mut v = self.members.unwrap_or_default();
            v.push(input);
            self.members = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_members(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BisonItem>>,
        ) -> Self {
            self.members = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn max(mut self, input: i32) -> Self {
            self.max = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_max(mut self, input: std::option::Option<i32>) -> Self {
            self.max = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// Consumes the builder and constructs a [`ListBisonOutput`](crate::output::ListBisonOutput)
        pub fn build(self) -> crate::output::ListBisonOutput {
            crate::output::ListBisonOutput {
                members: self.members,
                max: self.max.unwrap_or_default(),
                version: self.version,
            }
        }
    }
}
impl ListBisonOutput {
    /// Creates a new builder-style object to manufacture [`ListBisonOutput`](crate::output::ListBisonOutput)
    pub fn builder() -> crate::output::list_bison_output::Builder {
        crate::output::list_bison_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateBisonOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub id: std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub name: std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub herd: std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub rank: i32,
    #[allow(missing_docs)] // documentation missing in model
    pub tags: std::option::Option<std::vec::Vec<crate::model::BisonTag>>,
    #[allow(missing_docs)] // documentation missing in model
    pub version: std::option::Option<std::string::String>,
}
impl CreateBisonOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn herd(&self) -> &str {
        use std::ops::Deref;
        self.herd.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn rank(&self) -> i32 {
        self.rank
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn tags(&self) -> std::option::Option<&[crate::model::BisonTag]> {
        self.tags.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl std::fmt::Debug for CreateBisonOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBisonOutput");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("herd", &self.herd);
        formatter.field("rank", &self.rank);
        formatter.field("tags", &self.tags);
        formatter.field("version", &self.version);
        formatter.finish()
    }
}
/// See [`CreateBisonOutput`](crate::output::CreateBisonOutput)
pub mod create_bison_output {
    /// A builder for [`CreateBisonOutput`](crate::output::CreateBisonOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) herd: std::option::Option<std::string::String>,
        pub(crate) rank: std::option::Option<i32>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::BisonTag>>,
        pub(crate) version: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn herd(mut self, input: impl Into<std::string::String>) -> Self {
            self.herd = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_herd(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.herd = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn rank(mut self, input: i32) -> Self {
            self.rank = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_rank(mut self, input: std::option::Option<i32>) -> Self {
            self.rank = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        pub fn tags(mut self, input: crate::model::BisonTag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BisonTag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateBisonOutput`](crate::output::CreateBisonOutput)
        pub fn build(self) -> crate::output::CreateBisonOutput {
            crate::output::CreateBisonOutput {
                id: self.id.unwrap_or_default(),
                name: self.name.unwrap_or_default(),
                herd: self.herd.unwrap_or_default(),
                rank: self.rank.unwrap_or_default(),
                tags: self.tags,
                version: self.version,
            }
        }
    }
}
impl CreateBisonOutput {
    /// Creates a new builder-style object to manufacture [`CreateBisonOutput`](crate::output::CreateBisonOutput)
    pub fn builder() -> crate::output::create_bison_output::Builder {
        crate::output::create_bison_output::Builder::default()
    }
}
