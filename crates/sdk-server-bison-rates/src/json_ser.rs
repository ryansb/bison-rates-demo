// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_output_create_bison_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::output::CreateBisonOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("herd").string(input.herd.as_str());
    }
    {
        object.key("id").string(input.id.as_str());
    }
    {
        object.key("name").string(input.name.as_str());
    }
    if input.rank != 0 {
        object.key("rank").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rank).into()),
        );
    }
    if let Some(var_1) = &input.tags {
        let mut array_2 = object.key("tags").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bison_tag(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_error_access_denied_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::AccessDeniedException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.code {
        object.key("code").string(var_5.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_bad_request_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::BadRequestException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.code {
        object.key("code").string(var_6.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_gateway_timeout_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::GatewayTimeoutException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.code {
        object.key("code").string(var_7.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_internal_failure_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::InternalFailureException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.code {
        object.key("code").string(var_8.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_not_acceptable_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::NotAcceptableException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.code {
        object.key("code").string(var_9.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_not_implemented_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::NotImplementedException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.code {
        object.key("code").string(var_10.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_request_too_large_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::RequestTooLargeException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.code {
        object.key("code").string(var_11.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_resource_conflict_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::ResourceConflictException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.code {
        object.key("code").string(var_12.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_resource_not_found_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::ResourceNotFoundException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.code {
        object.key("code").string(var_13.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_serialization_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::SerializationException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.code {
        object.key("code").string(var_14.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_service_unavailable_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::ServiceUnavailableException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.code {
        object.key("code").string(var_15.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_unknown_operation_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::UnknownOperationException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.code {
        object.key("code").string(var_16.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_unsupported_media_type_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::UnsupportedMediaTypeException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_17) = &input.code {
        object.key("code").string(var_17.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_validation_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::ValidationException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.field_list {
        let mut array_19 = object.key("fieldList").start_array();
        for item_20 in var_18 {
            {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_crate_model_validation_exception_field(
                    &mut object_21,
                    item_20,
                )?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_output_list_bison_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::output::ListBisonOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("max").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max).into()),
        );
    }
    if let Some(var_22) = &input.members {
        let mut array_23 = object.key("members").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bison_item(
                    &mut object_25,
                    item_24,
                )?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bison_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BisonTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.key {
        object.key("key").string(var_26.as_str());
    }
    if let Some(var_27) = &input.value {
        object.key("value").string(var_27.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_validation_exception_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ValidationExceptionField,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("path").string(input.path.as_str());
    }
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bison_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BisonItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("id").string(input.id.as_str());
    }
    {
        object.key("name").string(input.name.as_str());
    }
    if input.rank != 0 {
        object.key("rank").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rank).into()),
        );
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bison_tag(
                    &mut object_31,
                    item_30,
                )?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    Ok(())
}
