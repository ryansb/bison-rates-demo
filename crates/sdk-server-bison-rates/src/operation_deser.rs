// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub async fn parse_create_bison_request<B>(
    #[allow(unused_variables)] request: &mut axum_core::extract::RequestParts<B>,
) -> std::result::Result<
    crate::input::CreateBisonInput,
    aws_smithy_http_server::rejection::RequestRejection,
>
where
    B: aws_smithy_http_server::body::HttpBody + Send,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::create_bison_input::Builder::default();
        let body = request
            .take_body()
            .ok_or(aws_smithy_http_server::rejection::RequestRejection::BodyAlreadyExtracted)?;
        let bytes = hyper::body::to_bytes(body).await?;
        if !bytes.is_empty() {
            aws_smithy_http_server::protocols::check_rest_json_1_content_type(request)?;
            input = crate::json_deser::deser_operation_crate_operation_create_bison(
                bytes.as_ref(),
                input,
            )?;
        }
        input.build()?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub async fn parse_list_bison_request<B>(
    #[allow(unused_variables)] request: &mut axum_core::extract::RequestParts<B>,
) -> std::result::Result<
    crate::input::ListBisonInput,
    aws_smithy_http_server::rejection::RequestRejection,
>
where
    B: aws_smithy_http_server::body::HttpBody + Send,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::list_bison_input::Builder::default();
        let input_string = request.uri().path();
        let (input_string, (m0, _, m2)) =
            nom::sequence::tuple::<_, _, nom::error::Error<&str>, _>((
                nom::sequence::preceded(
                    nom::bytes::complete::tag("/"),
                    nom::branch::alt::<_, _, nom::error::Error<&str>, _>((
                        nom::bytes::complete::take_until("/"),
                        nom::combinator::rest,
                    )),
                ),
                nom::sequence::preceded(
                    nom::bytes::complete::tag("/"),
                    nom::bytes::complete::tag::<_, _, nom::error::Error<&str>>("bison"),
                ),
                nom::sequence::preceded(
                    nom::bytes::complete::tag("/"),
                    nom::branch::alt::<_, _, nom::error::Error<&str>, _>((
                        nom::bytes::complete::take_until("/"),
                        nom::combinator::rest,
                    )),
                ),
            ))(input_string)?;
        debug_assert_eq!("", input_string);
        input = input.set_stage(Some(
            crate::operation_deser::parse_str_list_bison_input_stage(m0)?,
        ));
        input = input.set_herd(Some(
            crate::operation_deser::parse_str_list_bison_input_herd(m2)?,
        ));
        input.build()?
    })
}

pub fn parse_str_list_bison_input_stage(
    value: &str,
) -> std::result::Result<std::string::String, aws_smithy_http_server::rejection::RequestRejection> {
    let value = <_>::from(
        percent_encoding::percent_decode_str(value)
            .decode_utf8()?
            .as_ref(),
    );
    Ok(value)
}

pub fn parse_str_list_bison_input_herd(
    value: &str,
) -> std::result::Result<std::string::String, aws_smithy_http_server::rejection::RequestRejection> {
    let value = <_>::from(
        percent_encoding::percent_decode_str(value)
            .decode_utf8()?
            .as_ref(),
    );
    Ok(value)
}
