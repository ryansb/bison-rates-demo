// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::all)]
pub struct OperationRegistry<B, Op0, In0, Op1, In1> {
    create_bison: Op0,
    list_bison: Op1,
    _phantom: std::marker::PhantomData<(B, In0, In1)>,
}
#[allow(clippy::all)]
pub struct OperationRegistryBuilder<B, Op0, In0, Op1, In1> {
    create_bison: Option<Op0>,
    list_bison: Option<Op1>,
    _phantom: std::marker::PhantomData<(B, In0, In1)>,
}
#[derive(std::fmt::Debug)]
pub enum OperationRegistryBuilderError {
    UninitializedField(&'static str),
}
impl std::fmt::Display for OperationRegistryBuilderError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::UninitializedField(v) => write!(f, "{}", v),
        }
    }
}
impl std::error::Error for OperationRegistryBuilderError {}
impl<B, Op0, In0, Op1, In1> Default for OperationRegistryBuilder<B, Op0, In0, Op1, In1> {
    fn default() -> Self {
        Self {
            create_bison: Default::default(),
            list_bison: Default::default(),
            _phantom: std::marker::PhantomData,
        }
    }
}
#[allow(clippy::all)]
impl<B, Op0, In0, Op1, In1> OperationRegistryBuilder<B, Op0, In0, Op1, In1> {
    pub fn create_bison(self, value: Op0) -> Self {
        let mut new = self;
        new.create_bison = Some(value);
        new
    }
    pub fn list_bison(self, value: Op1) -> Self {
        let mut new = self;
        new.list_bison = Some(value);
        new
    }
    pub fn build(
        self,
    ) -> Result<OperationRegistry<B, Op0, In0, Op1, In1>, OperationRegistryBuilderError> {
        Ok(OperationRegistry {
            create_bison: match self.create_bison {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "create_bison",
                    ))
                }
            },
            list_bison: match self.list_bison {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_bison",
                    ))
                }
            },
            _phantom: std::marker::PhantomData,
        })
    }
}
#[allow(clippy::all)]
impl<B, Op0, In0, Op1, In1> From<OperationRegistry<B, Op0, In0, Op1, In1>>
    for aws_smithy_http_server::routing::Router<B>
where
    B: Send + 'static,
    Op0: crate::server_operation_handler_trait::Handler<B, In0, crate::input::CreateBisonInput>,
    In0: 'static + Send,
    Op1: crate::server_operation_handler_trait::Handler<B, In1, crate::input::ListBisonInput>,
    In1: 'static + Send,
{
    fn from(registry: OperationRegistry<B, Op0, In0, Op1, In1>) -> Self {
        let create_bison_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::POST,
            aws_smithy_http_server::routing::request_spec::UriSpec::new(
                aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                    aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("prod")), aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("bison"))]),
                    aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                )
            ),
        );
        let list_bison_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec::new(
                aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                    aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("bison")), aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                )
            ),
        );
        aws_smithy_http_server::routing::Router::new_rest_json_router(vec![
            (
                tower::util::BoxCloneService::new(
                    crate::server_operation_handler_trait::operation(registry.create_bison),
                ),
                create_bison_request_spec,
            ),
            (
                tower::util::BoxCloneService::new(
                    crate::server_operation_handler_trait::operation(registry.list_bison),
                ),
                list_bison_request_spec,
            ),
        ])
    }
}
