// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn add_headers_create_bison(
    input: &crate::output::CreateBisonOutput,
    mut builder: http::response::Builder,
) -> std::result::Result<http::response::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_1) = &input.version {
        let formatted_2 = AsRef::<str>::as_ref(inner_1);
        if !formatted_2.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_2;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "version",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("X-Bison-Version", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_bison(
    input: &crate::output::ListBisonOutput,
    mut builder: http::response::Builder,
) -> std::result::Result<http::response::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_3) = &input.version {
        let formatted_4 = AsRef::<str>::as_ref(inner_3);
        if !formatted_4.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_4;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "version",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("X-Bison-Version", header_value);
        }
    }
    Ok(builder)
}
